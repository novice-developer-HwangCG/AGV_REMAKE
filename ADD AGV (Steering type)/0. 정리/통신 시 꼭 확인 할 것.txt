A. 영구(static) 설정한 경우
Ubuntu GUI(NetworkManager) 에서 “수동(Manual) IPv4” 프로필을 만들어 저장했거나

/etc/network/interfaces 또는 /etc/netplan 에 static IP 블록을 추가해 netplan apply 또는 ifup/ifdown 으로 설정을 적용한 경우

이렇게 해 두면…

완전 껐다 켜도 (전원 오프/부팅)
→ OS 부팅 시 자동으로 해당 인터페이스에 같은 IP, 넷마스크, 라우트가 적용됩니다.

동작 중 랜 케이블을 뽑았다가 다시 꽂아도
→ NetworkManager 또는 networkd가 link-up 이벤트를 감지하고, 자동으로 인터페이스를 다시 올리며 기존 설정(IP, 라우트)을 그대로 사용합니다.

며칠 후 재부팅＋랜 케이블 꽂기
→ 동일하게, 부팅 시 설정이 적용되고 link-up 시 활성화되어 바로 통신이 복구됩니다.

즉, 한 번만 영구 설정해 두면 매번 수동으로 다시 입력할 필요 없이 “바로 통신”이 가능합니다.

B. 임시(ip addr add) 설정한 경우
터미널에서 sudo ip addr add … / sudo ip route add … 처럼 일회성으로만 설정했다면

재부팅하면
→ 이 설정은 메모리 상에만 남아 있는 것이어서 초기화됩니다. 부팅 후엔 다시 ip addr add 등을 반복해 주셔야 합니다.

램프 켜진 상태에서 케이블만 뽑았다 꽂으면
→ IP는 살아 있기 때문에, cable-down 상태→cable-up 상태로 link가 복구되면 즉시 원래 IP로 통신이 가능합니다.

부팅 후 며칠 있다가 사용하려 케이블 꽂으면
→ (1)번과 마찬가지로 부팅 시 설정이 사라졌기 때문에, 케이블을 아무리 꽂아도 IP가 없어 통신되지 않습니다. 다시 설정을 해야 합니다.

영구 설정(static): 재부팅·케이블 뺐다 꽂기·시간 경과와 관계없이 한 번의 설정만으로 항상 유지

임시 설정(dynamic): OS 재시작(또는 네트워크 서비스 재시작) 시 사라지므로, 그때마다 다시 적용해야 함; 다만 케이블만 잠깐 뺐다 꽂는 것은 정상 통신 복구에 문제 없음

따라서 “한 번만 설정하고 끝”을 원하시면, NetworkManager 수동 프로필이나 netplan/interfaces 파일을 통해 static IP를 영구적으로 등록해 두시는 걸 권장드립니다.


인터페이스 분리

유선인터페이스(enp3s0/eth0)는 192.168.100.x 같은 사설망에 묶어 두고,

와이파이(wlan0 등)는 DHCP나 다른 사설망(예: 192.168.0.x)으로 연결
두 인터페이스가 서로 다른 네트워크에 속해 있으면, 서로 간섭 없이 독립적으로 동작합니다.

기본(default) 라우트 설정

와이파이로 인터넷·ROS 마스터에 접속할 때는, 와이파이 인터페이스가 “기본 게이트웨이(default route)”가 되도록 설정하세요.

반대로, 유선랜에는 gateway 항목을 비워 두거나 metric 을 크게 주어(메트릭을 높게) 기본 경로가 되지 않도록 합니다.

이렇게 하면 ping 8.8.8.8 등 인터넷 트래픽은 와이파이를 타고, AGV 제어용 통신은 유선을 타며 충돌이 없습니다.

NetworkManager 프로필 활용

Ubuntu GUI 또는 nmcli connection 명령으로, 유선과 무선을 각각 “Manual”/“DHCP” 프로필로 만들어 두시면,

ROS 작업 시 nmcli connection up <wifi-profile> 하고, AGV 복귀 시 nmcli connection up <eth-profile> 처럼 간단한 재연결만으로 환경 전환이 가능합니다.

ROS 네트워크 변수 설정

ROS_MASTER_URI, ROS_IP (또는 ROS_HOSTNAME) 등을 와이파이 네트워크에 맞게 바꿔 주고,

AGV 제어할 땐 ROS 네트워크 변수 없이 그냥 TCP 서버 클라이언트 구조로 동작시키면, ROS 환경의 전환이 깔끔해집니다.


유선(AGV) ↔ 무선(ROS) 을 서로 다른 네트워크로 분리해 두면 상호 간섭이 없습니다.

유선은 gateway 없이 “사설망 전용”으로, 무선은 인터넷·ROS 접속용 default route로 설정하세요.

NetworkManager 프로필을 활용하면, “클릭 한 번” 또는 nmcli 명령어 한 줄로 AGV 모드와 ROS 모드를 전환할 수 있습니다.




노트북 및 젯슨종료 후 재 셋팅방법

노트북

1.인터페이스 이름 확인
ip link show - 유선랜 포트가 enp3s0(혹은 eno…, ens… 등)으로 나오는지 확인

2. 주소 붙이기
sudo ip addr add 192.168.100.1/24 dev enp3s0
sudo ip link set enp3s0 up
(enp3s0 대신 1번에서 확인한 이름을 사용)

3. 라우트 확인
ip route show
192.168.100.0/24 dev enp3s0 이 없다면: sudo ip route add 192.168.100.0/24 dev enp3s0

4. 연결 테스트
ping 192.168.100.2

젯슨
1. 인터페이스 확인
ip link show

유선랜이 eth0 등으로 올라와 있는지 보고

2. ip 주소 붙이기
sudo ip addr add 192.168.100.2/24 dev eth0
sudo ip link set eth0 up

3. 라우트 추가
ip route show
192.168.100.0/24 dev eth0 이 없다면: sudo ip route add 192.168.100.0/24 dev eth0

4. 연결 테스트
ping 192.168.100.1


간단한 pico 및 연결 테스트 코드
노트북 1212.py
젯슨 2323.py


lidar -> usb-1a86_USB2.0-Serial-if00-port0 / usb-Silicon_Labs_CP2102_USB_to_UART_Bridge_Controller_0001-if00-port0
485 -> usb-1a86_USB_Serial-if00-port0
pico -> usb-Prolific_Technology_Inc._USB-Serial_Controller-if00-port0


AGV status

0xA1 0 0 0 = 정상
0xA1 1 1 0 = pico 오류 (포트, 통신 등)
0xA1 1 2 0 = 485 포트 오류 (485에서 주는 알람 값 추가 예정)
0xA1 1 3 0 = Lidar 오류 (포트, 통신 등)
0xA1 1 4 0 = 선 없음 (라인트레이싱)

0xA1 0 1 0 = 배터리 20% 미만일 시 보내는 프로토콜

0xA1 1 2 1 = 485 저전압
0xA1 1 2 2 = 과전류 알람
0xA1 1 2 3 = 홀센서 알람
0xA1 1 2 4 = 과부하 알람
0xA1 1 2 5 = 파라미터 또는 통신 알람
0xA1 1 2 6 = 과전압 알람
0xA1 1 2 7 = 과열 알람
0xA1 1 2 8 = 발진 알람
0xA1 1 2 9 = stall 알람

로직 차트
수동
제어 시 전진, 후진 버튼 누르면 즉각 주행
회전 원할 시 회전 값과 전진 버튼을 같이 주어야 회전을 함

- 회전 명령을 우선시 하기 때문에 회전 명령을 주고 전진 명령을 하면 회전을 함
예시: (0 1 1 1 0 0 0 CHK) -> 스피드 값 무시 회전 우선
- 회전이 아닌 전진 후진을 원할 경우 회전 명령 값은 항상 0(None)을 주어야 함
예시: (0 1 1 0 0 0 0 CHK) -> 회전 값 없음 전진

자동
기본 라인트레이싱은 스피드값과 전진 명령만 주면 바로 라인을 따라 주행 시작 (후진 없음)
거리 기반 라인트레이싱은 자동 모드일 때만 값을 받기 때문에 자동 모드 상태에서 거리 값을 전달 후 전진 버튼을 눌러야 거리 값 만큼 주행 함
거리 값 초기화 헤더가 오면 이전에 받은 거리 값 및 남은 거리값 모두 초기화
새로운 거리 값을 받을 때에도 이전에 받은 거리 값 및 남은 거리값 초기화 동일

목표 거리 값 기반 라인트레이싱 중 정지 명령으로 멈추거나 선이 없어서 멈출 경우 남은 목표 거리 값은 자동 저장
이후 재 주행 명령을 내리면 남은 목표 거리 값으로 주행 시작 
